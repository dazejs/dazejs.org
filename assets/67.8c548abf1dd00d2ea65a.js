(window["webpackJsonp"] = window["webpackJsonp"] || []).push([[67],{

/***/ 524:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ("# 验证器\n\n对于请求数据或者其它数据，推荐使用便捷的验证器进行合法性验证\n\n---\n\n## 定义验证器\n\n为具体的验证场景定义一个验证器类，在需要验证的时候调用该验证器\n\n```ts\nimport { validator, isEmail } from '@dazejs/framework';\n\n@validator()\nexport default class User  {\n  @isEmail()\n  email: string;\n}\n\n```\n\n---\n\n## 验证数据\n\n在需要 `User` 验证器的控制器中，使用`this.validate(data, name)`进行验证：\n\n```ts\nimport { BaseController, controller, http } from '@dazejs/framework';\nimport userValidator from '../validator/user'\n\n@controller('/posts')\nexport default class Post extends BaseController {\n  @http.get()\n  index() {\n    const data = {\n      email: 'xxx@xxx.com'\n    }\n    const validator = this.validate(data, userValidator)\n    // 验证失败\n    if (validator.fails) {\n      console.log(validator.errors)\n    }\n  }\n}\n\n```\n\n或者可以直接使用 `request.validate(name)` 来检查请求数据:\n\n```ts\nimport { BaseController, controller, http } from '@dazejs/framework';\nimport userValidator from '../validator/user'\n\n@controller('/posts')\nexport default class Post extends BaseController {\n  @http.get()\n  index() {\n    this.request.validate(userValidator);\n    // todo\n  }\n}\n\n```\n\n> 如果检查失败，会根据请求类型返回相应的错误信息\n\n---\n\n## 验证规则\n\n#### `message` 参数说明\n- `$field` 表示字段名称\n- `$1 - $n` 表示参数值\n\n例如：\n\n`@Length(10, 20, { message: '$field must be between $1 and $2' }) username;`\n\n当字段值小于`10`或者大于`20` 时候，错误信息就会生成 `username must be between 10 and 20`\n\n> 所有验证装饰器都提供了 `小驼峰` 和 `大驼峰` 的写法\n\n### **通用规则**\n\n### `@Passed(func [,options])`\n\n使用自定义函数检查字段值, `func` 接收一个 `value` 作为参数, `value` 的值为字段值\n\n### `@Accepted([options])`\n\n检查字段值是否在 `['yes', 'on', true, 'true', 1, '1']` 中\n\n### `@Is(comparison [,options])`\n\n检查字段值和传入的值是否一致, 使用 `Object.is` 检查\n\n### `@Required([options])`\n\n检查字段值是否为非 `undefined`\n\n### `@Equals(comparison [,options])`\n\n检查字段值和传入的值是否相等, 使用 `===` 运算符检查\n\n### `@NotEquals(comparison [,options])`\n\n检查字段值和传入的值是否不相等\n\n### `@IsEmpty([options])`\n\n检查字段值是否为空，`null`, `undefined`, `''` 表示为空\n\n### `@IsNotEmpty([options])`\n\n检查字段值是否不为空，`null`, `undefined`, `''` 表示为空\n\n### **数字规则**\n\n### `@IsDivisibleBy(num [,options])`\n\n检查字段值是否可以被传入的 `num` 值整除\n\n### `@IsPositive([options])`\n\n检查字段值是否是一个正数\n\n### `@Min(min [, options])`\n\n检查字段值是否大于 `min`\n\n### `@Max(max [, options])`\n\n检查字段值是否小于 `max`\n\n### **日期规则**\n\n### `@AfterDate(date [, options])`\n\n检查字段值是否在 `date` 日期之后, `date` 必须为 `Date` 类型\n\n### `@BeforeDate(date [, options])`\n\n检查字段值是否在 `date` 日期之前, `date` 必须为 `Date` 类型\n\n### **类型规则**\n\n### `@IsBoolean([options])`\n\n检查字段值是否为 `Boolean` 类型\n\n### `@IsDate([options])`\n\n检查字段值是否为 `Date` 类型\n\n### `@IsString([options])`\n\n检查字段值是否为 `String` 类型\n\n### `@IsNumber([options])`\n\n检查字段值是否为 `Number` 类型\n\n### `@IsArray([options])`\n\n检查字段值是否为 `Array` 类型\n\n### `@IsError([options])`\n\n检查字段值是否为 `Error` 类型\n\n### `@IsFunction([options])`\n\n检查字段值是否为 `Function` 类型\n\n### `@IsBuffer([options])`\n\n检查字段值是否为 `Buffer` 类型\n\n### `@IsObject([options])`\n\n检查字段值是否为 `Object` 类型\n\n### `@IsRegExp([options])`\n\n检查字段值是否为 `RegExp` 类型\n\n### `@IsSymbol([options])`\n\n检查字段值是否为 `Symbol` 类型\n\n### `@IsNullOrUndefined([options])`\n\n检查字段值是否为 `null` 或者 `undefined`\n\n### `@IsNull([options])`\n\n检查字段值是否为 `null`\n\n### `@IsUndefined([options])`\n\n检查字段值是否为 `undefined`\n\n### **字符串规则**\n\n### `@IsDateString([options])`\n\n检查字段值是否是一个表示时间的字符串\n\n### `@IsBooleanString([options])`\n\n检查字段值是否是字符串 `'true'` 或者 `'false'`\n\n### `@IsNumberString([options])`\n\n检查字段值是否是一个数字字符串\n\n### `@Contains(seed [,options])`\n\n检查字段值是否包含 `seed` 字符串\n\n### `@NotContains(seed [,options])`\n\n检查字段值是否不包含 `seed` 字符串\n\n### `@IsAlpha([options])`\n\n检查字段值是否只包含字母 `a-zA-Z`\n\n### `@IsAlphanumeric([options])`\n\n检查字段值是否只包含字母和数字\n\n### `@IsAscii([options])`\n\n检查字段值是否只包含 `ASCII` 字符\n\n### `@IsBase32([options])`\n\n检查字符串是否是 `base32` 编码\n\n### `@IsBase64([options])`\n\n检查字符串是否是 `base64` 编码\n\n### `@IsByteLength(min, max [,options])`\n\n检查字段值长度 (使用 `utf-8` 字节) 是否在 `min` 和 `max` 之间\n\n### `@IsCreditCard([options])`\n\n检查字段值是否是一个信用卡号\n\n### `@IsCurrency([options])`\n\n检查字段值是否是货币字符串\n\n### `@IsEmail([options])`\n\n检查字段值是否是一个有效的 `Email` 格式字符串\n\n### `@IsFQDN([options])`\n\n检查字段值是否是一个域名\n\n### `@IsFullWidth`\n\n检查字符串是否包含 `Unicode` 全形字符\n\n### `@IsHalfWidth([options])`\n\n检查字段值是否包含 `Unicode` 半形字符\n\n### `@IsHexColor([options])`\n\n检查字段值是否是一个十六进制颜色值\n\n### `@IsHexadecimal([options])`\n\n检查字段值是否是一个十六进制数字\n\n### `@IsIP([version [, options]])`\n\n检查字段值是否是一个IP\n\n### `@IsISBN([version [, options]])`\n\n检查字符串是否是ISBN图书书号\n\n### `@IsISSN([options])`\n\n检查字符串是否是ISSN杂志编号\n\n### `@IsISIN([options])`\n\n检查字符串是否是ISIN证券编码\n\n### `@IsISO8601([options])`\n\n检查字符串是否是ISO8601格式时间\n\n### `@IsJSON([options])`\n\n检查字符串是否是JSON字符串\n\n\n### `@IsLowercase([options])`\n\n检查字符串是否是小写\n\n### `@IsUppercase([options])`\n\n检查字符串是否是大写\n\n### `@IsMobilePhone([locale [, options]])`\n\n检查字符串是否是合法的移动手机号\n\n\n### `@IsMongoId([options])`\n\n检查字符串是否是 `MongoDB ObjectID`\n\n\n### `@IsMultibyte([options])`\n\n检查字符串是否包含一个多字节字符\n\n\n### `@IsSurrogatePair([options])`\n\n检查字符串是否包含UTF-16扩展编码字符\n\n### `@IsURL([options])`\n\n检查字符串是否是一个 `URL` 地址\n\n\n### `@IsUUID([version [, options]])`\n\n检查字符串是否是一个UUID\n\n### `@Length(min, max [, options])`\n\n检查字符串长度\n\n### `@MinLength(min [, options])`\n\n检查字符串长度 ` >= min`\n\n### `@MaxLength(max [, options])`\n\n检查字符串长度 ` <= max`\n\n### `@Matches(pattern [, modifiers [, options]])`\n\n检查字符串是否匹配指定正则");

/***/ })

}]);