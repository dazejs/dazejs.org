(window["webpackJsonp"] = window["webpackJsonp"] || []).push([[60],{

/***/ 517:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ("# 中间件\n\n中间件可以在请求到控制器之间的逻辑层，可以在控制器之前做一些逻辑处理。\n\n---\n\n<!-- ![](./assets/middleware-1.png) -->\n\n## 定义\n\n`Middleware` 是一种特殊的组件，通过使用 `@middleware` 装饰器来表示这是一个中间件类\n\n`Middleware` 组件需要实现 `MiddlewareInterface` 接口\n\n```ts\nimport { middleware, MiddlewareInterface, Request, Next }from '@dazejs/framework'\n\n@middleware()\nexport class ExampleMiddleware implements MiddlewareInterface {\n  resolve(request: Request, next: Next) {\n    return next()\n  }\n}\n\n```\n\n> `next()` 的结果必须使用 `return` 返回， `next()` 总是返回一个包裹 `Response` 的 `Promise` 对象\n\n\n例子：创建一个中间件，在参数 `version` 的值为 `v1` 的时候返回一个 `Does not support v1` 的响应信息\n\n```ts\nimport { middleware, BaseMiddleware }from '@dazejs/framework'\n\n@middleware()\nexport class ExampleMiddleware extends BaseMiddleware {\n  resolve(request, next) {\n    if (request.param('version') === 'v1') {\n      return this.response().BadRequest('Does not support v1');\n    }\n    return next()\n  }\n}\n\n```\n\n> `BaseMiddleware` 基类提供了许多便捷方法\n\n---\n\n\n## 使用\n\n框架提供了 `@useMiddleware(name)` 装饰器来使用中间件\n\n### 在控制器中使用中间件\n\n**对控制器类使用**\n\n```ts {5}\nimport { controller, http, useMiddleware }from '@dazejs/framework'\nimport ExampleMiddleware from '../middlewares/example'\n\n@controller('/books')\n@useMiddleware(ExampleMiddleware)\nexport class BookController {\n  // ...\n}\n\n```\n\n> 中间件将会对该控制器的所有方法生效\n\n**对控制器方法使用**\n\n```ts {7}\nimport { controller, http, useMiddleware }from '@dazejs/framework'\nimport ExampleMiddleware from '../middlewares/example'\n\n@controller('/books')\nexport class BookController {\n  @http.get()\n  @useMiddleware(ExampleMiddleware)\n  index() {\n    // ...\n  }\n}\n\n```\n\n> 中间件只会对该控制器的 `index` 方法生效\n\n**使用别名进行加载**\n\n使用 `@middleware(name: string)` 参数设置中间件别名\n\n```ts\nimport { middleware, BaseMiddleware }from '@dazejs/framework'\n\n@middleware('exampleMiddleware')\nexport class ExampleMiddleware {\n  resolve(request, next) {\n    return next()\n  }\n}\n\n```\n\n使用中间件\n\n```ts {7}\nimport { controller, http, useMiddleware }from '@dazejs/framework'\n\n@controller('/books')\nexport class BookController {\n  @http.get()\n  @useMiddleware('exampleMiddleware')\n  index() {\n    // ...\n  }\n}\n\n```\n\n---\n\n## 前置执行\n\n```ts\nimport { Middleware }from '@dazejs/framework'\n\nexport default class ExampleMiddleware extends Middleware {\n  resolve(request, next) {\n    // todo\n    return next()\n  }\n}\n\n```\n\n---\n\n## 后置执行\n\n```ts\nimport { Middleware }from '@dazejs/framework'\n\nexport default class ExampleMiddleware extends Middleware {\n  async resolve(request, next) {\n    const response = await next()\n    // todo\n    return response\n  }\n}\n\n```\n\n> `next()` 函数总是返回 `Response` 对象，详见 `Response` 小节\n\n");

/***/ })

}]);