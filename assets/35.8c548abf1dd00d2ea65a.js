(window["webpackJsonp"] = window["webpackJsonp"] || []).push([[35],{

/***/ 492:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ("# 数据库\n\n数据库模块提供了数据库连接、查询构建器等功能\n\n## 连接数据库\n\n**配置**\n\n数据库配置文件位于 `src/config/database.ts`\n\n```ts\nexport default {\n  default: {\n    type: 'mysql',\n    host: '127.0.0.1',\n    user: 'root',\n    password: 'root',\n    port: 13306,\n    database: 'orm'\n  },\n};\n```\n\n使用 `this.db()` 来连接数据库, 默认参数 `default`, 即 `database` 配置文件的 `default` 属性 \n\n```ts\nthis.db('default')\n```\n\n---\n\n## 原生查询\n\n连接好数据库后可以调用方法来执行原生 sql, 框架为每种操作提供了对应的方法: `select`, `insert`, `delete`, `update`\n\n**`select` 查询**\n\n示例：\n```ts\nimport { Controller, http, route } from '@dazejs/framework';\n\n@route('/users')\nexport default class extends Controller {\n  @http.get()\n  async index() {\n    // 使用 ? 进行占位\n    const users = await this.db().select('select * from users where age > ?', [20]);\n    return users;\n  }\n}\n```\n\n**`insert` 插入**\n\n该方法用于执行插入语句，返回第一条插入成功的 `id`\n```ts\nconst id = await this.db().insert('insert into users (name, age) values (?, ?)', ['dazejs', 18]);\n```\n\n**`update` 更新**\n\n该方法用于更新数据库中已存在的记录，返回受更新语句影响的行数\n```ts\nconst affected = await this.db().update('update users set age = 20 where name = ?', ['dazejs']);\n```\n\n**`delete` 删除**\n\n该方法用于删除数据库中已存在的记录，返回受更新语句影响的行数\n```ts\nconst affected = await this.db().delete('delete from users where age > ?', [20]);\n```\n\n**`query` 通用查询**\n\n有些数据库语句不返回任何值，比如新增表，修改表，删除表等，对于这种类型的操作，可以使用 `query` 方法\n```ts\nawait this.db().query('drop table users')\n```\n\n---\n\n## 查询构建器\n\n### 查询数据\n\n`table` 方法为给定表返回一个链式查询构建器实例\n\n**查询单条数据**\n\n使用 `first()` 方法查询单条数据\n```ts\nthis.db().table('users').first()\n```\n最终生成的SQL语句可能是：\n```sql\nSELECT * FROM `users` LIMIT 1\n```\n\n**查询多条数据**\n\n使用 `find()` 方法查询多条数据\n```ts\nthis.db().table('users').find()\n```\n最终生成的SQL语句可能是：\n```sql\nSELECT * FROM `users`\n```\n\n### 插入数据\n\n**插入单条数据**\n\n使用 `insert` 方法插入单条数据\n```ts\nthis.db().table('users').insert({\n  name: 'dazejs',\n  age: 18\n})\n```\n\n**插入多条数据**\n\n使用 `insertAll` 方法插入单条数据\n```ts\nthis.db().table('users').insertAll([\n  {\n    name: 'dazejs1',\n    age: 18\n  },\n  {\n    name: 'dazejs2',\n    age: 18\n  }\n])\n```\n\n### 更新数据\n\n使用 `update` 方法更新数据\n\n```ts\nthis.db().table('users')\n  .where('id', 1)\n  .update({\n    name: 'dazejs',\n    age: 18\n  })\n```\n\n### 删除数据\n\n使用 `delete` 方法删除数据\n\n```ts\nthis.db().table('users')\n  .where('id', 1)\n  .delete()\n```\n\n### `Where` 子句\n\n#### `where` / `orWhere`\n\n使用 `where` 方法来添加 `where` 子句到查询中，`where` 方法需要传递 3 个参数，第一个参数为字段名，第二个参数为数据库支持的操作符，第三个参数是该列要比较的值\n```ts\nconst users = await this.db()\n  .table('users')\n  .where('age', '>', 18)\n  .find()\n```\n\n如果操作符为 `=`, 可以忽略不写\n\n```ts\nconst user = await this.db()\n  .table('users')\n  .where('id', 1)\n  .first()\n```\n\n如果要将多个条件合并可以多次调用, 默认使用 `and` 连接符\n\n```ts\nconst users = await this.db()\n  .table('users')\n  .where('age', '>', 18)\n  .where('age', '<', 30)\n  .find()\n```\n\n如果需要使用 `or` 连接符，使用 `orWhere` 方法\n\n```ts\nconst users = await this.db()\n  .table('users')\n  .where('age', '<', 18)\n  .orWhere('age', '>', 30)\n  .find()\n```\n\n#### `whereIn` / `orWhereIn` / `whereNotIn` / `orWhereNotIn`\n\n`whereIn` 用于验证给定列的值是否在给定数组中\n```ts\nconst users = await this.db()\n  .table('users')\n  .whereIn('age', [18, 28, 38])\n  .find()\n```\n\n`whereNotIn` 用于验证给定列的值不在给定数组中\n```ts\nconst users = await this.db()\n  .table('users')\n  .whereNotIn('age', [18, 28, 38])\n  .find()\n```\n\n#### `whereNull` / `orWhereNull` / `whereNotNull` / `orWhereNotNull`\n\n`whereNull` 用于验证给定列的值是否为 `NULL`\n```ts\nconst users = await this.db()\n  .table('users')\n  .whereNull('description')\n  .find()\n```\n\n`whereNotNull` 用于验证给定列的值不为 `NULL`\n```ts\nconst users = await this.db()\n  .table('users')\n  .whereNotNull('description')\n  .find()\n```\n\n#### `whereColumn` / `orWhereColumn`\n\n`whereColumn` 用于验证两个字段是否相等\n```ts\nconst users = await this.db()\n  .table('users')\n  .whereColumn('name', 'description')\n  .find()\n```\n\n也可以使用比较运算符比较两个字段\n```ts\nconst users = await this.db()\n  .table('users')\n  .whereColumn('height', '>', 'weight')\n  .find()\n```\n\n### 聚合查询\n\n**`count`**\n\n统计数量，参数是要统计的字段名, 可选参数\n```ts\nconst users = await this.db().table('users').count()\n```\n\n**`max`**\n\n获取最大值，参数是要统计的字段名\n```ts\nconst users = await this.db().table('users').max('score')\n```\n\n**`min`**\n\n获取最小值，参数是要统计的字段名\n```ts\nconst users = await this.db().table('users').min('score')\n```\n\n**`avg`**\n\n获取平均值，参数是要统计的字段名\n```ts\nconst users = await this.db().table('users').avg('score')\n```\n\n**`sum`**\n\n获取累加值，参数是要统计的字段名\n```ts\nconst users = await this.db().table('users').sum('score')\n```\n\n### 连接查询\n\n**内连接**\n\n使用 `join` 方法来实现简单的内连接，第一个参数为需要连接的表名，其他参数为连接的约束，例如\n```ts\nconst users = await this.db()\n  .table('users')\n  .columns('users.*', 'orders.price')\n  .join('orders', 'users.id', '=', 'orders.user_id')\n  .find()\n```\n\n**左连接/右连接**\n\n使用 `leftJoin` 和 `rightJoin` 来执行左连接 / 右连接, 用法与 `join` 一致\n```ts\nconst users = await this.db().table('users')\n            .leftJoin('posts', 'users.id', '=', 'posts.user_id')\n            .find();\nconst users = await this.db().table('users')\n            .rightJoin('posts', 'users.id', '=', 'posts.user_id')\n            .find();\n```\n\n#### 高级用法\n\n可以在 `join` 方法中传递一个回调函数， 该函数接收一个 `joinQuery` 构建器，该构建器还支持`on/orOn`, `where` 等方法\n\n```ts\nconst users = await this.db().table('users')\n            .join((joinQuery) => {\n              return joinQuery.table('posts')\n                .on('users.id', '=', 'orders.user_id')\n                .where('users.id', '>', 100)\n            })\n            .find();\n```\n\n\n\n### 联合查询\n\n`union` 用于联合两个查询\n\n```ts\nconst users = await this.db()\n  .table('users')\n  .where('age', 18)\n  .union(\n    this.db().table('users').where('age', 20)\n  )\n  .find()\n```\n\n### 排序与分组\n\n#### `orderBy`\n\n`orderBy` 用于对结果集进行排序，该方法需要2个参数， 第一个是需要排序的字段名，第二个字段为排序的方向（asc 或 desc）\n\n```ts\nconst users = await this.db()\n  .table('users')\n  .orderBy('id', 'asc')\n  .find()\n```\n\n#### `groupBy` / `having`\n\n`groupBy` 和 `having` 方法用于对结果集进行分组，`having` 的使用方法与 `where` 方法类似\n\n```ts\nconst users = await this.db()\n  .table('users')\n  .groupBy('location_id')\n  .having('location_id', '>', 100)\n  .find()\n```\n如果需要多个列进行分组，可以传递多个字段到 `groupBy`\n```ts\nconst users = await this.db()\n  .table('users')\n  .groupBy('location_id', 'status)\n  .having('location_id', '>', 100)\n  .find()\n```\n\n### 限定与分页\n\n#### `take`(`limit`) / `skip`(`offset`)\n\n使用 `skip` 和 `take` 方法来限定查询返回的结果集的数目，或者在查询中跳过给定数目的结果\n```ts\nconst users = await this.db()\n  .table('users')\n  .skip(10)\n  .take(10)\n  .find()\n```\n也可以使用别名 `limit` 和 `offset`\n```ts\nconst users = await this.db()\n  .table('users')\n  .offset(10)\n  .limit(10)\n  .find()\n```\n\n使用事务处理的话，需要数据库引擎支持事务处理。比如 `MySQL` 的 `MyISAM` 不支持事务处理，需要使用 `InnoDB` 引擎。\n\n#### \n\n### 悲观锁\n\n悲观锁（Pessimistic Concurrency Control）, 是一种并发控制的方法。它可以阻止一个事务以影响其他用户的方式来修改数据。如果一个事务执行的操作读某行数据应用了锁，那只有当这个事务把锁释放，其他事务才能够执行与该锁冲突的操作。\n\n悲观锁主要用于数据争用激烈的环境，以及发生并发冲突时使用锁保护数据的成本要低于回滚事务的成本的环境中。\n\n**共享锁**\n\n使用 `sharedLock` 来创建共享锁， 共享锁可以避免被选择的行被修改直到事务提交\n\n```ts\nconst users = await this.db()\n  .table('users')\n  .sharedLock()\n  .find()\n```\n\n**排他锁**\n\n使用 `lockForUpdate` 来创建排他锁， 避免选择行被其他人修改或删除\n\n```ts\nconst users = await this.db()\n  .table('users')\n  .lockForUpdate()\n  .find()\n```\n\n> 加锁时所有扫描过的行都会被锁上，因此使用悲观锁务必确定走了索引，而不是全表扫描，全表扫描相当于锁表操作\n> \n> `update`、`delete`、`insert` 操作会自动给语句加排他锁，所以在这三种语句后面不能加 `lockForUpdate`/`sharedLock`，否则会报错\n> \n> 事务提交、进程结束、进程中断都会自动释放锁\n> \n> 无论加共享锁还是排他锁都不影响普通 `select` 查询，因为普通查询时不会给语句加锁\n\n---\n\n## 事务处理\n\n**自动处理**\n\n使用 `transaction` 方法自动处理事务，该方法会在发生异常的时候自动回滚数据\n\n```ts {8,9,10,11}\nimport { Controller, http, route } from '@dazejs/framework';\n\n@route('/users')\nexport default class extends Controller {\n  @http.get()\n  async index() {\n\n    await this.db().transaction(async (conn) => {\n      await conn.table('users').insert({ name: 'example1' })\n      await conn.table('users').insert({ name: 'example2' })\n    })\n\n    return this.response().Created();\n  }\n}\n```\n\n**手动处理**\n\n也支持手动处理事务\n\n```ts {1,6,8}\nconst conn = await this.db().beginTransaction();\n\ntry {\n  await conn.table('users').insert({ name: 'example1' });\n  await conn.table('users').insert({ name: 'example2' });\n  await conn.commit();\n} catch (err) {\n  await conn.rollback();\n}\n\n```");

/***/ })

}]);