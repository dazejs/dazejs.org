(window["webpackJsonp"] = window["webpackJsonp"] || []).push([[12],{

/***/ 469:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ("# 控制器\n\n控制器负责处理传入的请求，并返回对客户端的响应。\n\n## 定义\n\n控制器必须继承基础控制器 `Controller`\n\n```ts {3}\nimport { Controller } from '@dazejs/framework'\n\nexport default class User extends Controller {\n  // ...\n}\n\n```\n\n## 定义路由\n\n控制器使用 `@Route([prefix])` 装饰器来表示该控制器使用了路由功能\n\n```ts\nimport { Controller, Route } from '@dazejs/framework'\n\n// 当前控制器的端点访问以 '/users' 开头 (可省略开头 '/')\n@Route('/users')\nexport default class User extends Controller {\n  // ...\n}\n```\n\n框架提供了 `Get`, `Post`, `Put`,`Patch`,`Del`,`Head`,`Option`, `All` 装饰器（位于 `Http` 命名空间下），用于创建访问路由：\n\n```ts\nimport { Controller, Route, Http } from '@dazejs/framework'\n\n// 当前控制器的端点访问以 '/users' 开头 (可省略开头 '/')\n@Route('users')\nexport default class User extends Controller {\n    // get /users\n    @Http.Get()\n    index() {\n        // ...\n    }\n\n    // put /users/:id\n    @Http.Put(':id')\n    update(id) {\n        // ...\n    }\n}\n```\n\n上面代码会自动创建`get`方法访问的`/users`的端点与`put`方法访问的`/users/:id`的端点\n\n::: warning\n`@All` 装饰器会使用所有 `http` 模块支持的方法，详细信息见 `http` 模块的 `http.METHODS` 属性\n:::\n\n## 路由参数\n\n路由的参数框架会自动注入到控制器方法中：\n\n```ts\nimport { Controller, Route, Http } from '@daze/framework';\n\n@Route()\nexport default class User extends Controller {\n    @Http.Get('/:name/:age')\n    index(name, age) {\n        // ...\n    }\n}\n```\n\n::: tip\n路由参数根据定义顺序注入\n:::\n\n## REST 风格\n\n使用 `@Rest` 装饰器代替 `@Route` 装饰器，并且默认 `Rest` 方法无需添加装饰器:\n\n```ts\nimport { Controller, Rest } from '@daze/framework';\n\n@Rest('posts')\nexport default class Post extends Controller {\n   /**\n   * Display a listing of the resource.\n   */\n  index() {\n    //\n  }\n\n  /**\n   * Show the form for creating a new resource.\n   */\n  create() {\n    //\n  }\n\n  /**\n   * Display the specified resource.\n   * @param {number} id\n   */\n  show(id) {\n    //\n  }\n\n  /**\n   * Show the form for editing the specified resource.\n   * @param {number} id\n   */\n  edit(id) {\n    //\n  }\n\n  /**\n   * Store a newly created resource in storage.\n   */\n  store() {\n    //\n  }\n\n  /**\n   * Update the specified resource in storage.\n   * @param {number} id\n   */\n  update(id) {\n    //\n  }\n\n  /**\n   * Remove the specified resource from storage.\n   * @param {number} id\n   */\n  destroy(id) {\n    //\n  }\n}\n```\n\n内置 `Rest` 风格方法：\n\n| 请求类型 | 资源地址        | 控制器方法 | 说明             |\n| -------- | --------------- | ---------- | ---------------- |\n| get      | /posts          | index()      | 索引/列表        |\n| get      | /posts/create   | create()     | 创建（显示表单)  |\n| post     | /posts          | store()      | 保存你创建的数据 |\n| get      | /posts/:id      | show(id)       | 获取对应id的内容 |\n| get      | /posts/:id/edit | edit(id)       | 编辑（显示表单） |\n| put      | /posts/:id      | save(id)       | 保存你编辑的数据 |\n| delete   | /posts/:id      | destroy(id)    | 删除对应id的内容 |\n<!-- \n## 内置属性\n\n框架提供了控制器内置属性，用来强化控制器的功能, 我们可以用过控制器实例非常便捷的获取请求数据，操作响应等等：\n```ts\nimport { Controller, Http } from '@dazejs/framework'\n\n@Controller()\nexport default class User {\n    @Http.Get(':id')\n    show(id) {\n        console.log(this.request) // 获取请求实例\n        console.log(this.query) // 获取请求 query，同 this.request.query\n        console.log(this.querystring) // 获取请求 querystring，同 this.request.querystring\n        // 更多属性...\n    }\n}\n\n```\n### **控制器提供了以下内置属性**\n\n### `this.app`\n\n框架 Application 对象实例\n\n### `this.config`\n\n配置对象\n\n### `this.request`\n\n请求对象\n\n### `this.view(template [, vars])`\n\n用来创建视图实例\n\n### `this.render(template [, vars])`\n\n渲染视图模板文件， 同 `this.view().render(template [, vars])`\n\n### `this.assign(key, value)`\n\n传递数据到视图模板，同 `this.view().assign(key, value)` -->");

/***/ })

}]);